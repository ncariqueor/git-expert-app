{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGif.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","res","useFetchGif","GitExpertApp","categories","item","ReactDOM","render","document","getElementById"],"mappings":"2MAkCeA,EA/BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAgBrC,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,QCGhBG,G,MATK,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC7B,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,S,uBCNHK,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAUF,GAD9C,+DAGAG,MAAMR,GAHN,cAGbS,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAJY,kBAMZA,EAAKC,KAAI,SAAAC,GAAQ,IAAD,EACnB,MAAO,CACHf,GAAIe,EAAIf,GACRC,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIC,cAAN,aAAE,EAAYC,iBAAiBf,SAVvB,2CAAH,sDC6BLgB,EAzBC,SAAC,GAAgB,IAAfX,EAAc,EAAdA,SAAc,ECDL,SAACA,GAAc,IAAD,EACXrB,mBAAS,CAC/B2B,KAAM,GACNM,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAgBrC,OAVAC,qBAAU,WACNhB,EAAQC,GAAUgB,MAAK,SAAAC,GACnBH,EAAS,CACLR,KAAMW,EACNL,SAAS,SAIlB,CAACZ,IAEGa,EDb2BK,CAAYlB,GAAhCS,EAFc,EAEpBH,KAAcM,EAFM,EAENA,QAEtB,OACI,qCACI,6BAAKZ,IAEHY,GAAW,wCAEb,qBAAKhB,UAAU,YAAf,SAGQa,EAAOF,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIf,aEetB0B,EA9BM,WAAO,IAAD,EAEaxC,mBAAS,CAAC,cAFvB,mBAEhByC,EAFgB,KAEJ1C,EAFI,KASvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ0C,EAAWb,KAAI,SAAAc,GAAI,OACf,cAAC,EAAD,CAEIrB,SAAUqB,GADLA,YClBjCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0567bc8e.chunk.js","sourcesContent":["import {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputValue = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats, ]);\r\n            setInputValue('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputValue}\r\n            />\r\n        </form>\r\n    )\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddCategory;","import 'animate.css';\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default GifGridItem;","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=xOojPUZRUOYsJXNWjw1jGx6Z0pp6NQdh`;\r\n\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    return data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        };\r\n    });\r\n};","import GifGridItem from \"./GifGridItem\";\r\n\r\nimport { useFetchGif } from \"../hooks/useFetchGif\";\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    const { data: images, loading } = useFetchGif(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            { loading && <p>Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifGrid;","import {useState, useEffect} from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGif = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(res => {\r\n            setState({\r\n                data: res,\r\n                loading: false\r\n            });\r\n\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n};","import {useState} from 'react';\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GitExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     //setCategories([...categories, 'HunterXHunter']);\r\n    //     setCategories(cats => [...cats, 'HunterXHunter']);\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(item => (\r\n                        <GifGrid\r\n                            key={item}\r\n                            category={item}\r\n                        />\r\n                        )\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GitExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GitExpertApp from \"./GitExpertApp\";\n\nReactDOM.render(\n  <GitExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}